name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ main ] # mainブランチにpushされたら実行
  workflow_dispatch: # 手動実行も可能にする

env:
  # --- Google Cloud 設定 (必ず自分の値に置き換える) ---
  PROJECT_ID: my-secure-streamlit-app # GCPプロジェクトID
  PROJECT_NUMBER: your-gcp-project-number # ★★★ GCPプロジェクト番号に置き換え ★★★ (gcloud projects describe my-secure-streamlit-app --format='value(projectNumber)' で確認)
  GAR_LOCATION: asia-northeast1 # Artifact Registry のリージョン
  REPOSITORY: my-streamlit-images # Artifact Registry のリポジトリ名
  SERVICE_NAME: my-secure-streamlit-app # Cloud Run のサービス名
  REGION: asia-northeast1 # Cloud Run のリージョン

  # --- サービスアカウント (メールアドレス) ---
  # ★★★ YOUR_PROJECT_ID を実際のプロジェクトID (my-secure-streamlit-app) に置き換え ★★★
  APP_SA_EMAIL: my-streamlit-app-runner@my-secure-streamlit-app.iam.gserviceaccount.com # App用SA
  DEPLOY_SA_EMAIL: github-actions-deployer@my-secure-streamlit-app.iam.gserviceaccount.com # Deploy用SA

  # --- Workload Identity Federation ---
  WIF_POOL_ID: github-pool # 作成したWIFプールID
  WIF_PROVIDER_ID: github-provider # 作成したWIFプロバイダID
  # WIFプロバイダのフルパス (PROJECT_NUMBER を上で正しく設定すること)
  WIF_PROVIDER: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.WIF_POOL_ID }}/providers/${{ env.WIF_PROVIDER_ID }}

  # --- Secret Manager ---
  SECRET_ID: my-app-api-key # アプリが使用するSecretの名前
  # アプリがSecret IDを知るための環境変数名 (main.py で os.getenv するキー)
  SECRET_ID_ENV_VAR_NAME: MY_APP_API_KEY_SECRET_ID
  # Secretの値をマウントする先の環境変数名（今回は使わないが例として）
  # SECRET_VALUE_ENV_VAR_NAME: MY_APP_API_KEY_VALUE

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    # Workload Identity Federation を使うための権限設定
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Google Cloud への認証 (WIF を使用)
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WIF_PROVIDER }}
        service_account: ${{ env.DEPLOY_SA_EMAIL }}

    # (任意) Google Cloud SDK (gcloud) のセットアップ
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    # Docker イメージのビルドと Artifact Registry へのプッシュ
    # gcloud auth configure-docker で認証ヘルパーを設定
    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

    - name: Build Docker image
      run: docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .

    - name: Push Docker image
      run: docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    # Cloud Run へのデプロイ
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        # アプリケーションが使用するサービスアカウントを指定 (Firestore, Secret Managerアクセス用)
        service_account: ${{ env.APP_SA_EMAIL }}

        # --- ↓↓↓ Secret Manager と環境変数の設定を追加 ↓↓↓ ---
        # Secret Manager のシークレットを環境変数として Cloud Run に "マウント" する
        # 注: 今回のアプリコード(main.py)はマウントされた値(MY_APP_API_KEY_VALUE)を直接は使わず、
        #     Secret ID を使って能動的に取得しに行くため、secretsセクションは必須ではないが設定例として残す。
        #     もしSecretの値を直接環境変数で使いたい場合は、この secrets セクションを利用し、
        #     main.py で os.getenv(env.SECRET_VALUE_ENV_VAR_NAME) のように読み込む。
        # secrets: |
        #   ${{ env.SECRET_VALUE_ENV_VAR_NAME }}=${{ env.SECRET_ID }}:latest

        # アプリケーションが必要とする環境変数を設定
        env_vars: |
          # main.py が Secret ID を取得するために使用する環境変数
          ${{ env.SECRET_ID_ENV_VAR_NAME }}=${{ env.SECRET_ID }}
          # main.py がプロジェクトIDを取得するために使用する環境変数 (Cloud Runが自動設定する場合もある)
          # GCP_PROJECT=${{ env.PROJECT_ID }}
        # --- ↑↑↑ 設定追加ここまで ↑↑↑ ---

        # flags: '--allow-unauthenticated' # 必要に応じて公開アクセスを許可

    # デプロイされたURLを出力
    - name: Show Deployed URL
      run: echo "Deployed URL: ${{ steps.deploy.outputs.url }}"
